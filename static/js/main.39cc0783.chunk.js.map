{"version":3,"sources":["components/navbar.jsx","components/Display.jsx","components/content.jsx","components/Diagram.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","this","props","text","value","selectedOption","onChange","e","onSelected","target","data","map","obj","key","country","Component","UserDisplay","Fragment","item","confirmed","deaths","recovered","active","Content","style","backgroundColor","scope","Display","Diagram","state","population","App","handleSelect","val","setState","error","isLoaded","date","Date","setDate","getDate","month","getMonth","monthPaddid","day","dayPadded","yesterday","getFullYear","replace","Axios","get","FileName","then","response","arrObj","split","row","Object","assign","console","log","splice","json","items","index","some","i","findIndex","parseInt","push","sort","a","b","filter","x","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.39cc0783.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Select from \"react-select\"\r\n\r\nclass NavBar extends Component {\r\n\r\n    render() { \r\n        return (\r\n            <nav className=\"navbar navbar-dark bg-dark\">\r\n                <h1 className=\"navbar-brand mb-0 h1\">COVID-19  {this.props.text}</h1>\r\n                <div className=\"col-sm-3\">\r\n                    <span className=\"text-white\">Select country:</span > \r\n                    <select  value={this.props.selectedOption} onChange={(e)=>this.props.onSelected(e.target.value)}>\r\n                        <option>no selected</option>\r\n                        {this.props.data.map((obj) => <option key={obj.country}>{obj.country}</option>)}\r\n                    </select>\r\n                </div>\r\n            </nav>\r\n          );\r\n    }\r\n}\r\n \r\nexport default NavBar;","import React, { Component } from 'react';\r\n\r\nclass UserDisplay extends Component {\r\n  \r\n    render() { \r\n        return (\r\n            <React.Fragment>\r\n                <tr className=\"text-center\">\r\n                    <td className=\"text-left\">{this.props.item.country}</td>\r\n                    <td >{this.props.item.confirmed}</td>\r\n                    <td >{this.props.item.deaths}</td>\r\n                    <td >{this.props.item.recovered}</td>\r\n                    <td >{this.props.item.active}</td>\r\n                </tr>              \r\n            </React.Fragment>         \r\n        );\r\n    }\r\n}\r\n \r\nexport default UserDisplay;","import React, { Component } from 'react';\r\nimport Display from \"./Display\"\r\n\r\n\r\nclass Content extends Component {\r\n   \r\n    render() { \r\n        return (\r\n            <div className=\"row shadow p-3 bg-light\">\r\n                <div className=\"table-responsive-sm \">\r\n                <table className=\"table table-hover table-bordered m-2\">\r\n                    <thead style={{backgroundColor: \"#c4cccf\"}}>\r\n                        <tr className=\"text-center\">\r\n                            <th className=\"text-left\" scope=\"col\">country</th>\r\n                            <th scope=\"col\">confirmed</th>\r\n                            <th scope=\"col\">deaths</th>\r\n                            <th scope=\"col\">recovered</th>\r\n                            <th scope=\"col\">active</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                         {this.props.data.map((obj)=><Display key={obj.country} item={obj}/>)\r\n                         }\r\n                    </tbody>\r\n                </table>\r\n             </div> \r\n               \r\n            </div>\r\n            );\r\n    }\r\n}\r\n \r\nexport default Content;","import React, {Component } from 'react';\r\n\r\n\r\nclass Diagram extends Component {\r\n    constructor(props){\r\n        super()\r\n        this.state={\r\n            population:0\r\n        }\r\n    }\r\n   \r\n    render() { \r\n        return (\r\n            <div>\r\n                 {this.props.country}\r\n            </div>\r\n           \r\n          );\r\n    }\r\n}\r\n \r\nexport default Diagram;","import React, { Component } from 'react';\nimport NavBar from \"./components/navbar\"\nimport Content from \"./components/content\"\nimport Diagram from \"./components/Diagram\"\nimport Axios from \"axios\"\nimport  \"../node_modules/bootstrap/dist/css/bootstrap.css\"\nimport \"./tableStyle.css\"\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n       error:null,\n       isLoaded:false,\n       data:[],\n       date:null,\n       selectedOption: null\n      }\n}\n    \nFileName(){\n    const URL=\"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/_DATE_.csv\";\n    const date=new Date()//mindig az aktualis datumal jon letre\n    date.setDate(date.getDate()-2)//a tegnapi datum kell nekunk mindig\n    const month=date.getMonth()+1   //mert a januarnak 0 felel meg\n    const monthPaddid=month<10 ?  `0${month}` : month;\n    const day=date.getDate();\n    const dayPadded=day<10 ? `0${day}` : day;\n    const yesterday= `${monthPaddid}-${dayPadded}-${date.getFullYear()}`;\n    //console.log(\"tegnap=\"+yesterday)\n    this.setState({date:yesterday})\n    return URL.replace(\"_DATE_\",yesterday);            \n}\n\ncomponentDidMount(){\n    Axios.get(this.FileName())\n       .then((response) =>{\n            const arr=response.data.split(\"\\n\")\n            const arrObj=arr.map(row=> Object.assign({}, row.split(\",\")))\n            console.log(arrObj[0])\n            arrObj.splice(0,1);//a fejlec nem kell\n            console.log(arrObj[0])\n            let json = {\n                items: []\n            };             \n            arrObj.map((item,index)=> {  \n               if( json.items.some(obj=> obj.country ===item[3])){\n                    //console.log(\"mar van\");\n                    let i=json.items.findIndex(e=>e.country===item[3]);\n                    //console.log(item[3]+\"mar van:\"+i+\"-\"+(json.items[i].confirmed+parseInt(item[7])));\n                    json.items[i].confirmed=parseInt(json.items[i].confirmed)+parseInt(item[7]);\n                    json.items[i].deaths=parseInt(json.items[i].deaths)+parseInt(item[8]);\n                    json.items[i].recovered=parseInt(json.items[i].recovered)+parseInt(item[9]);\n                    json.items[i].active=item[10] ? parseInt(json.items[i].active)+parseInt(item[10]) :json.items[i].active;\n               }else\n                   json.items.push({ \n                        \"country\"  : item[3],\n                        \"confirmed\":item[7],\n                        \"deaths\":item[8],\n                        \"recovered\":item[9],\n                        \"active\"  : item[10]\n                    })\n                });\n            //rendezes:\n            json.items.sort((a,b) => (a.country > b.country) ? 1 : ((b.country > a.country) ? -1 : 0)); \n            //hibas adatok torlese:\n            json.items = json.items.filter(x => x.confirmed>0);\n            json.items = json.items.filter(x => x.country!=='\"Korea');\n\n            this.setState({\n                    isLoaded:true,\n                    data:json.items\n            })\n       })\n}\nhandleSelect = (val)=> {\n  this.setState({selectedOption:val})\n}\n\n  render() { \n    console.log(this.state.selectedOption+\" render-bol\");\n    return (\n      <React.Fragment>\n        <NavBar text={this.state.isLoaded ? \" date: \"+this.state.date  : \"is loading...\" } \n                data={this.state.data} \n                onSelected={this.handleSelect}\n                selectedOption={this.state.selectedOption}/>\n        <main className='row'>\n              <div className=\"col-sm-7\">\n                  <Content data={this.state.data} />\n              </div>\n              <div className=\"col-sm-5\">\n                 <Diagram country={this.state.selectedOption}/>\n              </div>   \n        </main>\n      </React.Fragment>\n      \n      );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}